#include "shared.h"


const char* shaderCode0 =
" float4x4 matWV : register(c0);\n"
" float4x4 matP : register(c4);\n"
" float4x4 matWV2 : register(c8);\n"
" float4   vecFog : register(c12);\n"
" float4   vecUV: register(c19);\n"
"\n"
" struct VS_IN\n"
"\n"
" {\n"
"     float4 ObjPos   : POSITION;\n"
"     float4 Color    : COLOR;\n"
"     float3 Normal   : NORMAL;\n"
"     float2 Texture  : TEXCOORD0;\n"
" };\n"
"\n"
" struct VS_OUT\n"
" {\n"
"     float4 ProjPos   : POSITION;\n"
"     float4 Color     : COLOR;\n"
"     float3 TextureFog: TEXCOORD0;\n"
" };\n"
"\n"
" VS_OUT main( VS_IN In )\n"
" {\n"
"     VS_OUT Out;\n"
"     float4 worldPos = mul( matWV2, In.ObjPos );\n"
"     float4 worldPos2 = mul( matWV, worldPos);\n"
"     Out.ProjPos = mul( matP, worldPos2 );\n"
"     Out.Color = In.Color.wxyz;\n"
"     Out.TextureFog.xy = In.Texture;\n"
"     Out.TextureFog.xy += vecUV.xy;\n"
"     if( vecFog.z == 1 )\n"
"         Out.TextureFog.z = saturate((vecFog.x + worldPos2.z ) * vecFog.y);\n"
"     else if( vecFog.z == 2)\n"
"         Out.TextureFog.z = saturate(exp(vecFog.x * worldPos2.z ));\n"
"     else\n"
"         Out.TextureFog.z = 1.0;\n"
"     return Out;\n"
" }\n";


const char* shaderCode1 =
" float4x4 matWV : register(c0);\n"
" float4   vecTrans : register(c11);\n"
" float4x4 matP : register(c4);\n"
" float4   vecFog : register(c12);\n"
"\n"
" struct VS_OUT\n"
" {\n"
"     float4 ProjPos  : POSITION;\n"
"     float4 Color    : COLOR;\n"
"     float3 TextureFog : TEXCOORD0;\n"
" };\n"
"\n"
" sampler mySampler : register(vf0);\n"
" VS_OUT main( int idx : INDEX )\n"
" {\n"
"     VS_OUT Out;\n"
"     float4 DataThis;\n"
"     float4 DataBase;\n"
"     float3 ObjPosBase;\n"
"     float4 ObjPos;\n"
"     float4 Texture;\n"
"     float idxBase = trunc(idx * (1.0/4.0)) * 4.0;\n"
"     float idxOffset = idx - idxBase;\n"
"     float4 vertData[4];\n"
"     asm {\n"
"         vfetch_full vertData[0].yxwz, idxBase, mySampler, DataFormat=FMT_16_16_16_16, NumFormat=integer, Signed=false, Stride=2, Offset=0, PrefetchCount =8;\n"
"         vfetch_mini vertData[1].yxwz, DataFormat=FMT_16_16_16_16, NumFormat=integer, Signed=false, Offset=2;\n"
"         vfetch_mini vertData[2].yxwz, DataFormat=FMT_16_16_16_16, NumFormat=integer, Signed=false, Offset=4;\n"
"         vfetch_mini vertData[3].yxwz, DataFormat=FMT_16_16_16_16, NumFormat=integer, Signed=false, Offset=6;\n"
"     };\n"
"     DataThis = vertData[idxOffset];\n"
"     DataBase = float4(vertData[0].x,vertData[1].x,vertData[2].x,vertData[3].x);\n"
"     ObjPosBase = float3(DataBase.x, DataBase.x, DataBase.x);\n"
"     ObjPosBase *= float3(1.0/32768.0, 1.0/1024.0, 1.0/32.0);\n"
"     ObjPosBase = frac(ObjPosBase);\n"
"     ObjPosBase *= 32.0;\n"
"     ObjPosBase = trunc(ObjPosBase);\n"
"     ObjPosBase -= 16.0;\n"
"     ObjPos = float4(DataThis.y, DataThis.y, DataThis.z, DataThis.z);\n"
"     ObjPos *= float4(1.0/65536.0, 1.0/256.0, 1.0/65536.0, 1.0 / 256.0);\n"
"     ObjPos = frac(ObjPos);\n"
"     ObjPos *= 256.0;\n"
"     ObjPos = trunc(ObjPos);\n"
"     ObjPos.xyz *= 1.0/128.0;\n"
"     ObjPos.xyz += ObjPosBase;\n"
"     ObjPos.xyz += vecTrans.xyz;\n"
"     float4 worldPos2 = mul( matWV, float4(ObjPos.xyz,1));\n"
"     Out.ProjPos = mul( matP, worldPos2 );\n"
"     float3 colTemp = float3(DataThis.w,DataThis.w,DataThis.w);\n"
"     colTemp *= float3(1.0/65536.0, 1.0/2048.0, 1.0/32.0);\n"
"     Out.Color = float4(frac(colTemp),1.0);\n"
"     if( ObjPos.w == 0 )\n"
"     {\n"
"         Out.TextureFog.x = DataBase.y;\n"
"         Out.TextureFog.y = DataBase.z;\n"
"     }\n"
"     else if( ObjPos.w == 1 )\n"
"     {\n"
"         Out.TextureFog.x = DataBase.y;\n"
"         float dv = 256.0 * frac( DataBase.w * ( 1/256.0 ) );\n"
"         Out.TextureFog.y = DataBase.z + dv;\n"
"     }\n"
"     else if( ObjPos.w == 2 )\n"
"     {\n"
"         float du = trunc( DataBase.w * ( 1/256.0 ) );\n"
"         Out.TextureFog.x = DataBase.y + du;\n"
"         Out.TextureFog.y = DataBase.z;\n"
"     }\n"
"     else if( ObjPos.w == 3 )\n"
"     {\n"
"         float du = trunc( DataBase.w * ( 1/256.0 ) );\n"
"         Out.TextureFog.x = DataBase.y + du;\n"
"         float dv = 256.0 * frac( DataBase.w * ( 1/256.0 ) );\n"
"         Out.TextureFog.y = DataBase.z + dv;\n"
"     }\n"
"     else\n"
"     {\n"
"         float idxExtra = idx + 4;\n"
"         float2 texCoordExtra;\n"
"         asm {\n"
"             vfetch_full texCoordExtra.wz__, idxExtra, mySampler, DataFormat=FMT_16_16_16_16, NumFormat=integer, Signed=false, Stride=2, Offset=0;\n"
"         };\n"
"         Out.TextureFog.xy = texCoordExtra;\n"
"     }\n"
"     Out.TextureFog.xy *= 1.0 / 4096.0;\n"
"     if( vecFog.z == 1 )\n"
"         Out.TextureFog.z = saturate((vecFog.x + worldPos2.z ) * vecFog.y);\n"
"     else if( vecFog.z == 2)\n"
"         Out.TextureFog.z = saturate(exp(vecFog.x * worldPos2.z ));\n"
"     else\n"
"         Out.TextureFog.z = 1.0;\n"
"     return Out;\n"
" }\n";


const char* shaderCode2 =
" float4x4 matWV : register(c0);\n"
" float4x4 matP : register(c4);\n"
" float4x4 matWV2 : register(c8);\n"
" float4   vecFog : register(c12);\n"
" float3   vecLight0 : register(c13);\n"
" float3   vecLight1 : register(c14);\n"
" float4   vecLight0Col : register(c15);\n"
" float4   vecLight1Col : register(c16);\n"
" float4   vecLightAmbientCol : register(c17);\n"
" float4   vecUV: register(c19);\n"
"\n"
" struct VS_IN\n"
" {\n"
"     float4 ObjPos   : POSITION;\n"
"     float4 Color    : COLOR;\n"
"     float3 Normal   : NORMAL;\n"
"     float2 Texture  : TEXCOORD0;\n"
" };\n"
"\n"
" struct VS_OUT\n"
" {\n"
"     float4 ProjPos   : POSITION;\n"
"     float4 Color     : COLOR;\n"
"     float3 TextureFog: TEXCOORD0;\n"
" };\n"
"\n"
" VS_OUT main( VS_IN In )\n"
" {\n"
"     VS_OUT Out;\n"
"     float4 worldPos = mul( matWV2, In.ObjPos );\n"
"     float4 worldPos2 = mul( matWV, worldPos);\n"
"     Out.ProjPos = mul( matP, worldPos2 );\n"
"     float3 normal = mul( (float3x3)matWV2, In.Normal);\n"
"     normal = mul((float3x3)matWV, normal);\n"
"     normal = normalize(normal);\n"
"     float light0 = max(dot(vecLight0, normal),0);\n"
"     float light1 = max(dot(vecLight1, normal),0);\n"
"     Out.Color = saturate(light0 * vecLight0Col + light1 * vecLight1Col + vecLightAmbientCol);\n"
"     Out.TextureFog.xy = In.Texture;\n"
"     Out.TextureFog.xy += vecUV.xy;\n"
"     if( vecFog.z == 1 )\n"
"         Out.TextureFog.z = saturate((vecFog.x + worldPos2.z ) * vecFog.y);\n"
"     else if( vecFog.z == 2)\n"
"         Out.TextureFog.z = saturate(exp(vecFog.x * worldPos2.z ));\n"
"     else\n"
"         Out.TextureFog.z = 1.0;\n"
"     return Out;\n"
" }\n";


const char* shaderCode3 =
" sampler2D diffuse_texture : register( s0 );\n"
" float4 diffuse_colour : register(c0);\n"
" float4 fog_colour : register(c1);\n"
" float4 cbuff_colour : register(c4);\n"
"\n"
" struct PS_IN\n"
" {\n"
"     float4 Color : COLOR;\n"
"     float3 TextureFog : TEXCOORD0_centroid;\n"
" };\n"
"\n"
" float4 main( PS_IN In ) : COLOR\n"
" {\n"
"     float2 uv = In.TextureFog.xy;\n"
"     float4 baseTexture = tex2D( diffuse_texture, uv );\n"
"     if( uv.x > 1.0 )\n"
"     {\n"
"         asm {\n"
"             tfetch2D baseTexture, uv, diffuse_texture, UseComputedLOD=false\n"
"         };\n"
"     }\n"
"     float4 baseColour = baseTexture * diffuse_colour * In.Color;\n"
"     float3 foggedColour = lerp(fog_colour.xyz, baseColour.xyz, In.TextureFog.z);\n"
"     return float4(foggedColour.xyz, baseColour.w);\n"
" }\n";


const char* shaderCode4 =
" struct VS_IN\n"
" {\n"
"     float2 ObjPos   : POSITION;\n"
"     float2 Texture  : TEXCOORD0;\n"
" };\n"
"\n"
" struct VS_OUT\n"
" {\n"
"     float4 ProjPos  : POSITION;\n"
"     float2 Tex0     : TEXCOORD0;\n"
" };\n"
"\n"
" VS_OUT main ( VS_IN In )\n"
" {\n"
"     VS_OUT Out;\n"
"     Out.ProjPos = float4( In.ObjPos, 0, 1 );\n"
"     Out.Tex0 = In.Texture;\n"
"     return Out;\n"
" }\n";

const char* shaderCode5 =
" struct PS_IN\n"
" {\n"
"     float2 Tex0 : TEXCOORD0;\n"
" };\n"
"\n"
" sampler2D screen_texture : register(s0);\n"
"\n"
" float4 main( PS_IN In ) : COLOR\n"
" {\n"
"     return tex2D( screen_texture, In.Tex0 );\n"
" }\n";
